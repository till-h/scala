Last login: Thu Dec  4 10:13:02 on ttys002
➜  ~  scala
zsh: command not found: scala
➜  ~  cd /Users/hacklt01/Background/scala
➜  scala git:(master) ✗ sbt console
[info] Loading global plugins from /Users/hacklt01/.sbt/0.13/plugins
[info] Set current project to scala (in build file:/Users/hacklt01/Background/scala/)
[info] Starting scala interpreter...
[info]
Welcome to Scala version 2.10.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_65).
Type in expressions to have them evaluated.
Type :help for more information.

scala> """(\(([^\)^\(]+)\))"""
res0: String = (\(([^\)^\(]+)\))

scala> """(\(([^\)^\(]+)\))""".r
res1: scala.util.matching.Regex = (\(([^\)^\(]+)\))

scala> val pattern = """(\(([^\)^\(]+)\))""".r
pattern: scala.util.matching.Regex = (\(([^\)^\(]+)\))

scala> pattern.
anchored            asInstanceOf        findAllIn           findAllMatchIn      findFirstIn
findFirstMatchIn    findPrefixMatchOf   findPrefixOf        isInstanceOf        pattern
replaceAllIn        replaceFirstIn      replaceSomeIn       split               toString
unanchored          unapplySeq

scala> pattern.
anchored            asInstanceOf        findAllIn           findAllMatchIn      findFirstIn
findFirstMatchIn    findPrefixMatchOf   findPrefixOf        isInstanceOf        pattern
replaceAllIn        replaceFirstIn      replaceSomeIn       split               toString
unanchored          unapplySeq

scala> pattern.find
findAllIn           findAllMatchIn      findFirstIn         findFirstMatchIn    findPrefixMatchOf
findPrefixOf

scala> pattern.findAllIn("5*(3*2)+7*(5-9)-((7/6)*2)")
res2: scala.util.matching.Regex.MatchIterator = non-empty iterator

scala> pattern.findAllIn("5*(3*2)+7*(5-9)-((7/6)*2)").map(x => println(x))
res3: Iterator[Unit] = non-empty iterator

scala> pattern.findAllIn("5*(3*2)+7*(5-9)-((7/6)*2)").foreach(x => println(x))
(3*2)
(5-9)
(7/6)

scala> pattern.
anchored            asInstanceOf        findAllIn           findAllMatchIn      findFirstIn
findFirstMatchIn    findPrefixMatchOf   findPrefixOf        isInstanceOf        pattern
replaceAllIn        replaceFirstIn      replaceSomeIn       split               toString
unanchored          unapplySeq

scala> pattern.
anchored            asInstanceOf        findAllIn           findAllMatchIn      findFirstIn
findFirstMatchIn    findPrefixMatchOf   findPrefixOf        isInstanceOf        pattern
replaceAllIn        replaceFirstIn      replaceSomeIn       split               toString
unanchored          unapplySeq

scala> pattern.replaceAllIn("5*(3*2)+7*(5-9)-((7/6)*2)", x => "foo")
res5: String = 5*foo+7*foo-(foo*2)

scala> pattern.replaceAllIn("5*(3*2)+7*(5-9)-((7/6)*2)", x => eval(x))
<console>:9: error: not found: value eval
              pattern.replaceAllIn("5*(3*2)+7*(5-9)-((7/6)*2)", x => eval(x))
                                                                     ^

scala> def eval(s: String) => "nonsense"
<console>:1: error: '=' expected but '=>' found.
       def eval(s: String) => "nonsense"
                           ^

scala> def eval(s: String) = "nonsense"
eval: (s: String)String

scala> pattern.replaceAllIn("5*(3*2)+7*(5-9)-((7/6)*2)", x => eval(x))
<console>:10: error: type mismatch;
 found   : scala.util.matching.Regex.Match
 required: String
              pattern.replaceAllIn("5*(3*2)+7*(5-9)-((7/6)*2)", x => eval(x))
                                                                          ^

scala> def eval(s: Regex.Match) = "nonsense"
<console>:7: error: not found: value Regex
       def eval(s: Regex.Match) = "nonsense"
                   ^

scala> import scala.util.matching.Regex
import scala.util.matching.Regex

scala> def eval(s: Regex.Match) = "nonsense"
eval: (s: scala.util.matching.Regex.Match)String

scala> pattern.replaceAllIn("5*(3*2)+7*(5-9)-((7/6)*2)", x => eval(x))
res8: String = 5*nonsense+7*nonsense-(nonsense*2)

scala>

---------------------------------------------------------------------------------------

scala> val re_multiplication = """([0-9\.]+)\*([0-9\.]+)""".r
re_multiplication: scala.util.matching.Regex = ([0-9\.]+)\*([0-9\.]+)

scala> for ( multiplication <- re_multiplication.findAllMatchIn("1*2*3*4") ) { println(multiplication.toString, multiplication.start, multiplication.end)}
(1*2,0,3)
(3*4,4,7)